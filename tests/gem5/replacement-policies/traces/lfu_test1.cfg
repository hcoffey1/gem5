# -*- coding: utf-8 -*-
# Copyright (c) 2019 Mingyuan
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Mingyuan Xiang

# access pattern: A, B, C, D, E, A, E
# If you have a 512B cache with 4-way associativity, and each cache
# line is 64B, with LFU replacement policy, you will observe:
# m, m, m, m, m, m, m,  where 'm' means miss, and 'h' means hit.
# Explanation of this result:
# A,B,C,D are misses, now the cache stores (A1,B1,C1,D1). The number after
# each letter is the count for the  accesses for the address range.
# E searches for a victim and selects A since it has the least count. Now
# the cache stores (E1,B1,C1,D1).
# A searches for a victim and selects E since it has the least count. Now
# the cache stores (A1,B1,C1,D1).
# E searches for a victim and selects A since it has the least count. Now
# the cache stores (E1,B1,C1,D1).

# state 0: access from A to D
# state 1: access E
# state 2: access A
# state 3: access E
STATE 0 270000 LINEAR 100 0 511 64 30000 30000 0
STATE 1 90000 LINEAR 100 512 639 64 30000 30000 0
STATE 2 90000 LINEAR 100 0 127 64 30000 30000 0
STATE 3 90000 LINEAR 100 512 639 64 30000 30000 0
STATE 4 1000000 IDLE
INIT 0
TRANSITION 0 1 1
TRANSITION 1 2 1
TRANSITION 2 3 1
TRANSITION 3 4 1
TRANSITION 4 4 1
