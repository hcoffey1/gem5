# -*- coding: utf-8 -*-
# Copyright (c) 2019 Jing
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Jing Qu, Hayden Coffey

# access pattern: 
# A, B, C, D, E, F, G, H
# A, B, C, D
# A`, B`, C`, D`, E`, F`, G`, H`
# A, B, C, D
# A`, B`, C`, D`, E`, F`, G`, H`
# Each letter represents a 64-Byte address range.

# Addresses to letter label
# Addresses 0x0   -> 0x1c0 : A - H
# Addresses 0x200 -> 0x3c0 : A` - H`

# If you have a 512B cache using LRU as the replacement policy
# with 4-way associativity, and each cache line is 64B.
# Our cache layout and behavior is as follows:

#Example Cache layout after sequential A-D access: 
#[A* C E G] [B* D F H] : * Marks LRU set member
#The You will observe:
# m m m m m m m m
# h h h h
# m m m m m m m m
# m m m m
# m m m m m m m m
# where 'h' means hit and 'm' means miss.
# Explanation of these results:
# State 0:              Cache State
#   A-H miss.           [A* C E G] [B* D F H] 
# State 1:
#   A-D hit.            [A C E* G] [B D F* H]
# State 2:
#   A`-H` miss.         [E` G` A`* C`] [F` H` B`* D`]
# State 3:
#   A miss:             [E` G` A C`*] [F` H` B`* D`]
#   B miss:             [E` G` A C`*] [F` H` B D`*]
#   C miss:             [E`* G` A C] [F` H` B D`*]
#   D miss:             [E`* G` A C] [F`* H` B D]
# State 4:
#   A`-H` miss. During the sequential accesses:
#       A` and C` replace E` and G`
#       B` and D` replace F` and H`
#   As a result, every access misses as data 
#   that will be relevant later is evicted.
# state 0: access A to H
# state 1: access A to D
# state 2: access A` to H`
# state 3: access A to D 
# state 4: access A` to H`

#Duration should equal period*(access count+1) for state if we want to simulate "access count" number of accesses
#State  duration    type    read %  start   end    size     Min/Max Period  data limit
STATE 0 270000      LINEAR   100    0       511    64       30000 30000     0
STATE 1 150000      LINEAR   0      0       255    64       30000 30000     0
STATE 2 270000      LINEAR   100    512     1023   64       30000 30000     0
STATE 3 150000      LINEAR   100    0       255    64       30000 30000     0
STATE 4 270000      LINEAR   100    512     1023   64       30000 30000     0
STATE 5 10000       IDLE
INIT 0

#Start, Next, Probability
TRANSITION 0 1 1
TRANSITION 1 2 1
TRANSITION 2 3 1
TRANSITION 3 4 1
TRANSITION 4 5 1
TRANSITION 5 5 1
#TODO: Parser requires comment/empty line at end of file or throws error 